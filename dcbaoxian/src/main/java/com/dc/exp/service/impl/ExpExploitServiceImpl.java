package com.dc.exp.service.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.dc.common.exception.ServiceException;
import com.dc.common.utils.CreatIDUtil;
import com.dc.common.vo.PageObject;
import com.dc.exp.dao.ExpExploitDao;
import com.dc.exp.dao.ExpExploitDocumentDao;
import com.dc.exp.dao.ExpMissionDao;
import com.dc.exp.entity.ExpExploit;
import com.dc.exp.entity.ExpMission;
import com.dc.exp.entity.ExpProgress;
import com.dc.exp.entity.ExpStatistics;
import com.dc.exp.entity.ExpSystem;
import com.dc.exp.service.ExpExploitService;
import com.dc.exp.service.ExpMissionService;
import com.dc.sys.vo.AllCommon;
@Service
public class ExpExploitServiceImpl implements ExpExploitService{

	@Autowired
	private ExpExploitDao expExploitDao;

	@Autowired
	private ExpMissionDao expMissionDao;
	@Autowired
	private ExpExploitDocumentDao expExploitDocumentDao;
	@Override
	public int saveObject(ExpExploit entity) {
		//1.对参数进行校验
		if(entity==null)
			throw new IllegalArgumentException("保存对象不能为空");
		if(StringUtils.isEmpty(entity.getDevelopNumber()))
			throw new IllegalArgumentException("编号不能为空");
		List<ExpExploit> list=expExploitDao.findByNumber(entity.getDevelopNumber());
		if(list.size()>0)
			throw new IllegalArgumentException("编号已存在");

		CreatIDUtil uid = new CreatIDUtil();
		String repId = uid.getNextId();
		entity.setDevelopId(repId);
		//2.将数据持久化到数据库
		int rows=expExploitDao.insertobject(entity);
		//3.返回结果
		return rows;
	}

	@Override
	public int insertProgressObject(ExpProgress entity) {
		//1.对参数进行校验
		if(entity==null)
			throw new IllegalArgumentException("保存对象不能为空");
		CreatIDUtil uid = new CreatIDUtil();
		String repId = uid.getNextId();
		entity.setProgressId(repId);
		int rows=expExploitDao.insertProgress(entity);

		return rows;
	}

	@Override
	public int deleteExploit(String developId) {

		int num = expExploitDocumentDao.getFindByDid(developId);
		if(num>0)
			throw new IllegalArgumentException("该数据在系统文档内还有文档，为了避免误删，请先删除文档后才能删除数据！");
		
		int row=expExploitDao.deleteObjects(developId);

		//3.对删除结果进行校验
		if(row==0)
			throw new ServiceException("记录可能已经不存在");
		
		
		//4.返回结果
		if(row>0) {
			expExploitDao.deleteProgress(developId);
		}
		return row;
	}

	@Override
	public int updateExploit(ExpExploit entity) {
		//1.参数有效性验证
		if(entity==null)
			throw new IllegalArgumentException("保存对象不能为空");
		if(StringUtils.isEmpty(entity.getDevelopNumber()))
			throw new IllegalArgumentException("编号不能为空");
		List<ExpExploit> list=expExploitDao.findByNumber(entity.getDevelopNumber());
		if(list.size()>1)
			throw new IllegalArgumentException("该编号至少存在2个，请核对所有数据");
		
		int num = 1;
		if(list.size()==1) {
			if(!list.get(0).getDevelopId().contentEquals(entity.getDevelopId())) {
				num=0;
			}
		}
		if(num==0)
			throw new IllegalArgumentException("编号已存在");
		
		//3.保存用户与角色关系数据
		int rows =expExploitDao.updateExploit(entity); 
		//4.返回结果
		return rows;
	}

	/**
	 * 点评已不用
	 */
	@Override
	public int updateRemarkObjects(String developId, String remarkContent, String remarkSatrap) {
		//1.参数合法性校验
		if(StringUtils.isEmpty(remarkContent))
			throw new IllegalArgumentException("点评内容不能为空");

		String details = remarkContent;
		Integer type = 2;
		int sum = expMissionDao.findCommonComb(type,details);
		if(sum==0) {
			AllCommon ent = new AllCommon();
			CreatIDUtil uid = new CreatIDUtil();
			String cid = uid.getNextId();
			ent.setId(cid);
			ent.setDetails(details);
			ent.setType(2);
			expMissionDao.insertCommon(ent);
		}

		ExpExploit entity = new ExpExploit();
		int rows=-1;
		entity.setDevelopId(developId);
		entity.setRemarkContent(remarkContent);
		entity.setRemarkSatrap(remarkSatrap);

		rows=expExploitDao.updateExploit(entity);
		//3.对删除结果进行校验
		if(rows==0)
			throw new ServiceException("记录可能已经不存在");
		//4.返回结果
		return rows;
	}

	@Override
	public int updateStatusObjects(String developId, Integer status) {

		//1.参数有效性验证
		if(StringUtils.isEmpty(status))
			throw new IllegalArgumentException("阶段不能为空");
		//2.更新用户自身信息
		ExpExploit entity = new ExpExploit();
		entity.setDevelopId(developId);
		entity.setStatus(status);
		Date date = null;
			if(status==12) {
				date = new Date();
				entity.setFinishTime(date);
			}else {
				expExploitDao.updateFinishTime(developId);
			}
		int row=expExploitDao.updateExploit(entity);
		
		//3.保存用户与角色关系数据

		//4.返回结果
		return row;
	}

	@Override
	public PageObject<ExpExploit> findPageObjects(Integer pageCurrent,String username,Integer status) {
		//1.对参数进行有效验证
		if(pageCurrent==null||pageCurrent<1)
			throw new IllegalArgumentException("当前页码值不正确");
		//2.基于用户名查询总记录数
		int rowCount=expExploitDao.getRowCount(username,status);
		//3.对总记录数进行校验
		if(rowCount==0)
			throw new ServiceException("没有对应记录");
		//4.基于用户名,当前页码等信息查询当前页记录
		int pageSize=15;
		int startIndex=(pageCurrent-1)*pageSize;
		List<ExpExploit> records=
				expExploitDao.findPageObjects(username,status,startIndex,pageSize);
		//5.封装查询结果。
		PageObject<ExpExploit> po=new PageObject<ExpExploit>();
		po.setRecords(records);
		po.setRowCount(rowCount);
		po.setPageSize(pageSize);
		po.setPageCurrent(pageCurrent);
		/*int pageCount=rowCount/pageSize;
						if(rowCount%pageSize!=0){
							pageCount++;
						}*/
		po.setPageCount((rowCount-1)/pageSize+1);

		//6.返回结果
		return po;
	}

	@Override
	public List<ExpProgress> findProgressObject(String disId) {
		List<ExpProgress> list = expExploitDao.findProgressById(disId);
		if(list.size()<1)
			throw new IllegalArgumentException("没有对应记录");
		return list;
	}

	@Override
	public ExpExploit findByIdObject(String developId) {
		return expExploitDao.findObjectById(developId);
	}




}
