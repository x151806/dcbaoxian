package com.dc.exp.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import com.dc.common.exception.ServiceException;
import com.dc.common.utils.CreatIDUtil;
import com.dc.common.vo.PageObject;
import com.dc.common.vo.PicUploadResult;
import com.dc.exp.dao.ExpExploitDocumentDao;
import com.dc.exp.dao.ExpMissionDao;
import com.dc.exp.dao.ExpSystemDao;
import com.dc.exp.entity.ExpExploit;
import com.dc.exp.entity.ExpExploitDocument;
import com.dc.exp.entity.ExpExploitDownFile;
import com.dc.exp.entity.ExpMission;
import com.dc.exp.entity.ExpProgress;
import com.dc.exp.entity.ExpSystem;
import com.dc.exp.entity.ExpSystemUpload;
import com.dc.exp.service.ExpExploitDocumentService;
import com.dc.exp.service.ExpSystemService;
import com.dc.sys.vo.AllCommon;
import com.dc.sys.vo.SysUserDeptVo;

@Service
public class ExpExploitDocumentServiceImpl  implements ExpExploitDocumentService{

	@Autowired
	private ExpExploitDocumentDao expExploitDocumentDao;


	//该数据从spring容器中动态获取数据
	@Value("${document.localpath}")
	private String localPath; //E:/dc-upload/exploit-document/



	@Override
	public int deleteObject(String uploadId,String site) {
		int rows=expExploitDocumentDao.deleteDocument(uploadId);
		expExploitDocumentDao.deleteDownFile(uploadId);

		if(rows==0)
			throw new ServiceException("记录可能已经不存在");

		File file = new File(site);
		file.delete();
		//			boolean isDelete = file.delete();

		//			if(isDelete==true) {
		//				succeed.append(exp.getFileName());
		//				succeed.append(" ");
		//			}else {
		//				defeated.append(exp.getFileName());
		//				defeated.append(" ");
		//			}

		return rows;
	}

	@Override
	public int deleteObjectByDid(String disId) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public List<ExpExploitDocument> findObject(String disId, Integer type) {
		List<ExpExploitDocument> list = expExploitDocumentDao.findDocument(disId,type);

		if(list.size()==0)
			throw new ServiceException("没有对应记录");
		return list;
	}


	@Override
	public List<ExpExploitDownFile> findDownFileObject(String uploadId) {
		List<ExpExploitDownFile> list = expExploitDocumentDao.findDownFile(uploadId);

		if(list.size()==0)
			throw new ServiceException("没有对应记录");
		return list;
	}
	/**
	 * 文件上传实现思路
	 * 1.校验文件类型 jpg|png|gif....
	 * 2.校验是否为恶意程序
	 * 3.为了防止图片检索速度慢,采用分文件存储  yyyy/MM/dd/
	 * 4.防止文件重名  UUID + 随机数(3)
	 * 5.实现文件上传 	  
	 */
	@Override
	public PicUploadResult upload(MultipartFile[] uploadFile,ExpExploitDocument entity) {
		PicUploadResult result = new PicUploadResult();
		StringBuffer sb = new StringBuffer();

		try {
			for(int i=0;i<uploadFile.length;i++) {
				String localPathReal=upMethod(uploadFile[i]);


				//实现文件上传
				uploadFile[i].transferTo(new File(localPathReal));
				String fileName = uploadFile[i].getOriginalFilename();
				sb.append(fileName).append(",");
				//写入数据库
				CreatIDUtil uid = new CreatIDUtil();
				String uploadId = uid.getNextId();


				String disId = entity.getDisId();
				Integer type = entity.getType();

				entity.setDisId(disId);
				entity.setType(type);
				entity.setUploadId(uploadId);
				entity.setSite(localPathReal);
				entity.setFileName(fileName);

				expExploitDocumentDao.insertDocument(entity);



				//定义url
				//String url = "https://img14.360buyimg.com/n0/jfs/t1/7301/36/10557/363153/5c231de0E0a5565dd/2e8054392374dc29.jpg";
			}
			String url = sb.deleteCharAt(sb.length() - 1).toString();
			result.setUrl(url);
		} catch (Exception e) {
			e.printStackTrace();
			result.setError(1);	//文件上传失败
			return result;
		}



		//将字符全部小写

		//fileName = fileName.toLowerCase();
		//if(!fileName.matches("^.+\\.(jpg|png|gif)$")) { result.setError(1); //不是图片
		//return result; }



		return result;
	}






















	public String upMethod(MultipartFile uploadFile) {
		//1.获取文件名称  
		String fileName = uploadFile.getOriginalFilename();
		String nameOne = fileName;

		//3.实现分文件存储
		String dateDir = 
				new SimpleDateFormat("yyyy/MM/dd")
				.format(new Date());
		//  E:/dc-upload/system-problem/2019/01/29
		String localPathDir = localPath + dateDir;
		//判断文件夹是否存在
		File fileDir = new File(localPathDir);
		if(!fileDir.exists()) {
			fileDir.mkdirs();	//创建文件夹
		}

		//4.定义文件名称
		long milis = System.currentTimeMillis();
		String a  =String.valueOf(milis); 
		//		String num = a.substring(a.length()-8,a.length());
		//		String fileType = 
		//				fileName.substring
		//				(fileName.lastIndexOf("."));
		//形成文件名称
		String realName = a + "-" +nameOne;

		//E:/jt-upload/2019/01/29/abc.jpg
		String localPathReal = localPathDir + "/" + realName;
		return localPathReal;
	}

	@Override
	public int updateObject(ExpExploitDocument entity) {
		Integer audit = entity.getAudit(); 
		if(audit!=0&&audit!=1)
			throw new IllegalArgumentException("状态值不正确,audit="+audit);

		int rows=expExploitDocumentDao.updateDocument(entity);
		return rows;
	}

	@Override
	public int saveObject(ExpExploitDownFile entity) {
		//1.对参数进行校验
		if(entity==null)
			throw new IllegalArgumentException("保存对象不能为空");
		

		CreatIDUtil uid = new CreatIDUtil();
		String repId = uid.getNextId();
		entity.setDownId(repId);
		//2.将数据持久化到数据库
		int rows=expExploitDocumentDao.insertDownFile(entity);
		//3.返回结果
		return rows;
	}








}
