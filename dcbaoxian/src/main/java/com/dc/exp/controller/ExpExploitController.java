package com.dc.exp.controller;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionListener;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.dc.common.vo.JsonResult;
import com.dc.common.vo.PageObject;
import com.dc.common.vo.PicUploadResult;
import com.dc.exp.entity.ExpExploit;
import com.dc.exp.entity.ExpExploitDocument;
import com.dc.exp.entity.ExpExploitDownFile;
import com.dc.exp.entity.ExpMission;
import com.dc.exp.entity.ExpProgress;
import com.dc.exp.entity.ExpSystem;
import com.dc.exp.entity.ExpSystemUpload;
import com.dc.exp.service.ExpExploitDocumentService;
import com.dc.exp.service.ExpExploitService;
import com.dc.exp.service.ExpSystemService;
import com.dc.sys.vo.SysUserDeptVo;



@Controller
@RequestMapping("/exploit/")
public class ExpExploitController implements HttpSessionListener{

	@Autowired
	private ExpExploitService expExploitService;
	@Autowired
	private ExpExploitDocumentService expExploitDocumentService;




	@RequestMapping("doDevelopUI")
	public String doDevelopUI(){
		return "exp/exploit_develop";
	}
	
	@RequestMapping("doCatalogueUI")
	public String doCatalogueUI(){
		return "exp/exploit_catalogue";
	}
	
	@RequestMapping("doDocumenUI")
	public String doDocumenUI(){
		return "exp/exploit_documen";
	}
	
	
	@RequestMapping("doDevelopEditUI")
	public String doDevelopEditUI(){
		return "exp/exploit_develop_edit";
	}
	
	@RequestMapping("doDevelopUpdate")
	public String doDevelopUpdate(){
		return "exp/exploit_develop_update";
	}
	
	@RequestMapping("doDevelopFile")
	public String doDevelopFile(){
		return "exp/exploit_documen_file";
	}
	
	
	
	
	
	
	
	@RequestMapping("doSaveObject")
	@ResponseBody
	public JsonResult doSaveObject(ExpExploit entity){
		expExploitService.saveObject(entity);
		return new JsonResult("添加成功！");
	}
	@RequestMapping("doSaveProgress")
	@ResponseBody
	public JsonResult doSaveProgress(ExpProgress entity,HttpSession session){
		String handlers = session.getAttribute("username").toString();
		entity.setCreatedUser(handlers);
		expExploitService.insertProgressObject(entity);
		return new JsonResult("添加成功");
	}
	
	
	
	@RequestMapping("doDeleteObjects")
	@ResponseBody
	public JsonResult doDeleteObjects(
			String developId){
		int rows=expExploitService.deleteExploit(developId);
		return new JsonResult("删除成功!");
	}
	
	
	@RequestMapping("doUpdateRemark")
	@ResponseBody
	public JsonResult updateRemarkObjects(String developId, String remarkContent, String remarkSatrap,HttpSession session){
		remarkSatrap = session.getAttribute("username").toString();
		
		int rows=expExploitService.updateRemarkObjects(developId,remarkContent,remarkSatrap);
		return new JsonResult("点评成功！");
	}
	
	@RequestMapping("doUpdateStatus")
	@ResponseBody
	public JsonResult doUpdateStatus(
			String problemId,Integer status){
		
		int rows=expExploitService.updateStatusObjects(problemId,status);
		
		return new JsonResult("修改成功！");
	}
	
	
	@RequestMapping("doUpdateExploit")
	@ResponseBody
	public JsonResult doUpdateExploit(ExpExploit entity){
		
		expExploitService.updateExploit(entity);
		
		return new JsonResult("修改成功！");
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	@RequestMapping("doFindPageObjects")
	@ResponseBody
	public JsonResult findPageObjects(Integer pageCurrent){
		String username = "";
		Integer status = null;
		PageObject<ExpExploit> pageObject=
				expExploitService.findPageObjects(pageCurrent,username,status);
		return new JsonResult(pageObject);
	}
	

	@RequestMapping("doFindProgress")
	@ResponseBody
	public JsonResult findProgressObject(String disId){
		List<ExpProgress> list = expExploitService.findProgressObject(disId);

		return new JsonResult(list);
	}

	
	

	@RequestMapping("findByIdObject")
	@ResponseBody
	public JsonResult findByIdObject(String developId){
		return new JsonResult(
				expExploitService.findByIdObject(developId));
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	@RequestMapping("deleteByUploadId")
	@ResponseBody
	public JsonResult deleteByUploadId(String uploadId,String site){
		int rows=expExploitDocumentService.deleteObject(uploadId,site);
		return new JsonResult("删除成功");
	}
	
	@RequestMapping("updateDocument")
	@ResponseBody
	public JsonResult updateObject(ExpExploitDocument entity,HttpSession session){
		String auditName = session.getAttribute("username").toString();
		entity.setAuditName(auditName);
		int rows=expExploitDocumentService.updateObject(entity);
		return new JsonResult("修改成功");
	}
	
	
	@RequestMapping("findDocumentObjects")
	@ResponseBody
	public JsonResult findDocumentObjects(String disId, Integer type){
		List<ExpExploitDocument> list = expExploitDocumentService.findObject(disId,type);
		
		return new JsonResult(list);
	}
	
	@RequestMapping("findDownFileObject")
	@ResponseBody
	public JsonResult findDownFileObject(String uploadId){
		List<ExpExploitDownFile> list = expExploitDocumentService.findDownFileObject(uploadId);
		
		return new JsonResult(list);
	}
	
	
	//实现文件上传
		@RequestMapping("upload")
		@ResponseBody
		public PicUploadResult fileUpload (MultipartFile[] uploadFile,ExpExploitDocument entity,HttpSession session) {
			
			String handlers = session.getAttribute("username").toString();
			entity.setCreatedUser(handlers);
			return expExploitDocumentService.upload(uploadFile, entity);
		}

		
		//实现文件下载
		@RequestMapping("download")
		@ResponseBody
	    public void download(String filename,String site,String uploadId,
	            HttpServletResponse response,HttpSession session) throws IOException {
			
			filename=URLDecoder.decode(filename,"utf-8");
			site=URLDecoder.decode(site,"utf-8");
			uploadId=URLDecoder.decode(uploadId,"utf-8");

	        //模拟文件，myfile.txt为需要下载的文件  
			String path = site;
			 //得到要下载的文件
	        File file = new File(path);
	        if (!file.exists()) {
	        	response.setContentType("text/html; charset=UTF-8");//注意text/html，和application/html
	        	response.getWriter().print("<html><body><script type='text/javascript'>alert('您要下载的资源已被删除！');</script></body></html>");
	        	response.getWriter().close(); 
	            System.out.println("您要下载的资源已被删除！！");  
			}
	        //转码，免得文件名中文乱码  
	        String filenames = URLEncoder.encode(filename,"UTF-8");  
	        //设置文件下载头  
	        response.addHeader("Content-Disposition", "attachment;filename=" + filenames);    
	        //1.设置文件ContentType类型，这样设置，会自动判断下载文件类型    
	        response.setContentType("multipart/form-data"); 
	        // 读取要下载的文件，保存到文件输入流
	        FileInputStream in = new FileInputStream(path);
	        // 创建输出流
	        OutputStream out = response.getOutputStream();
	        // 创建缓冲区
	        byte buffer[] = new byte[1024]; // 缓冲区的大小设置是个迷  我也没搞明白
	        int len = 0;
	        //循环将输入流中的内容读取到缓冲区当中
	        while((len = in.read(buffer)) > 0){
	        	out.write(buffer, 0, len);
	        }
	        //关闭文件输入流
	        in.close();
	        // 关闭输出流
	        out.close();
	        
	        ExpExploitDownFile entity = new ExpExploitDownFile();
	        entity.setUploadId(uploadId);
	        entity.setFileName(filename);
	        String downName = session.getAttribute("username").toString();
	        entity.setDownName(downName);
	        expExploitDocumentService.saveObject(entity);
	 
	    }

}







